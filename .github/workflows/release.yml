name: Release @leomartin/distille

on:
  push:
    branches:
      - main

jobs:
  publish:
    runs-on: ubuntu-latest
    permissions:
      contents: write # to be able to publish a GitHub release
      issues: write # to be able to comment on released issues
      pull-requests: write # to be able to comment on released pull requests
      id-token: write # to enable use of OIDC for npm provenance
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: true

      - name: Setup Deno
        uses: denoland/setup-deno@v2

      - name: Setup Node JS
        uses: actions/setup-node@v4
        with:
          node-version: lts/*

      - name: Install semantic-release
        run: npm install -g semantic-release @semantic-release/changelog @semantic-release/exec @semantic-release/commit-analyzer @semantic-release/release-notes-generator @semantic-release/github

      - name: Create semantic-release config
        run: |
          cat > .releaserc.json << EOF
          {
            "branches": ["main"],
            "plugins": [
              "@semantic-release/commit-analyzer",
              "@semantic-release/release-notes-generator",
              "@semantic-release/changelog",
              ["@semantic-release/exec", {
                "prepareCmd": "jq '.version = \"\${nextRelease.version}\"' deno.json > deno.json.tmp && mv deno.json.tmp deno.json"
              }],
              ["@semantic-release/github", {
                "successComment": false,
                "failTitle": false
              }]
            ]
          }
          EOF

      - name: Run semantic-release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          npx semantic-release

      - name: Check and set version
        run: |
          # Check if version exists in root deno.json
          VERSION=$(jq -r '.version // "1.0.0"' deno.json)
          if [ "$VERSION" = "null" ] || [ -z "$VERSION" ]; then
            # If version is null or empty, set initial version
            VERSION="1.0.0"
            jq --arg version "$VERSION" '. + {version: $version}' deno.json > deno.json.tmp && mv deno.json.tmp deno.json
          fi

          # Get workspace packages from deno.json
          PACKAGES=$(jq -r '.workspace[]' deno.json)

          # Update version in all workspace packages
          for PACKAGE in $PACKAGES; do
            # Skip packages/api as it's excluded from publishing
            if [ "$PACKAGE" = "packages/api" ]; then
              continue
            fi

            # Update package deno.json
            if [ -f "$PACKAGE/deno.json" ]; then
              echo "Updating version in $PACKAGE/deno.json"
              jq --arg version "$VERSION" '. + {version: $version}' $PACKAGE/deno.json > $PACKAGE/deno.json.tmp && mv $PACKAGE/deno.json.tmp $PACKAGE/deno.json
            fi

            # Update package jsr.json if it exists
            if [ -f "$PACKAGE/jsr.json" ]; then
              echo "Updating version in $PACKAGE/jsr.json"
              jq --arg version "$VERSION" '. + {version: $version}' $PACKAGE/jsr.json > $PACKAGE/jsr.json.tmp && mv $PACKAGE/jsr.json.tmp $PACKAGE/jsr.json
            fi
          done

          echo "Using version: $VERSION"

      - name: Publish workspace
        run: |
          deno install --allow-scripts=npm:canvas@2.11.2
          deno publish --allow-dirty

      - name: Commit and push updated files
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          git add deno.json packages/core/deno.json packages/core/jsr.json
          git commit -m "chore: sync version in config files [skip ci]" || echo "No changes to commit"
          git push
